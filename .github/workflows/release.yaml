name: 'Create release'

on:
  push:
    tags:
      - '*'

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    name: 'Build release for ${{ matrix.os }}'
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2
      - name: 'Build Linux Python artefacts'
        uses: docker/build-push-action@v2
        id: docker-build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          file: Dockerfile
          push: false
      - name: 'Extract Linux artefacts'
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          # This step is required because docker buildx build outputs are not working well.
          # With buildx build outputs we could ask the docker engine to give us back the files
          # but that hangs the build.
          docker run --rm -v ${PWD}:/repo ${{ steps.docker-build.outputs.digest }} cp -rf /build-output /repo
      - name: 'Archive artifacts'
        uses: actions/upload-artifact@v2
        with:
          name: python-wheels-${{ matrix.os }}
          path: |
            build-output/*
  release:
    runs-on: ubuntu-latest
    name: 'Create release'
    needs: [build]
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: 'Generate changelog'
        id: changelog
        uses: metcalfc/changelog-generator@v0.4.4
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Read python artefact versions'
        id: read-version
        run: |
          cd python
          python setup.py --version
          echo ::set-output name=artefact-version::$( python setup.py --version )
      - name: 'Create Release'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.read-version.outputs.artefact-version }}
          name: Release ${{ steps.read-version.outputs.artefact-version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            build-output/pyecsim-${{ steps.read-version.outputs.artefact-version }}-*.whl