name: 'Create release'

on:
  push:
    tags:
      - '*'

jobs:
  build_windows:
    runs-on: windows-latest
    name: 'Build release for Windows'
    strategy:
      matrix:
        python-version: [ '3.5', '3.6', '3.7', '3.8' ]
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2
      - name: 'Install Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: 'Build with Python ${{ matrix.python-version }}'
        run: |
          cd python
          python setup.py bdist_wheel
      - name: 'Upload Windows artifacts'
        uses: actions/upload-artifact@v2
        with:
          name: python-wheels-windows
          path: |
            build-output/*

#  build_linux:
#    runs-on: ubuntu-latest
#    name: 'Build release for Linux'
#    steps:
#      - name: 'Checkout code'
#        uses: actions/checkout@v2
#      - name: 'Build Linux artifacts'
#        uses: docker/build-push-action@v2
#        id: docker-build
#        with:
#          file: Dockerfile
#          push: false
#      - name: 'Extract Linux artifacts'
#        run: |
#          # This step is required because docker buildx build outputs are not working well.
#          # With buildx build outputs we could ask the docker engine to give us back the files
#          # but that hangs the build.
#          docker run --rm -v ${PWD}:/repo ${{ steps.docker-build.outputs.digest }} cp -rf /build-output /repo
#      - name: 'Upload Linux artifacts'
#        uses: actions/upload-artifact@v2
#        with:
#          name: python-wheels-linux
#          path: |
#            build-output/*

  release:
    runs-on: ubuntu-latest
    name: 'Create release'
    needs: [ build_windows ]
#    needs: [ build_linux, build_windows ]
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: 'Read python artefact versions'
        id: read-version
        run: |
          cd python
          python setup.py --version
          echo ::set-output name=artefact-version::$( python setup.py --version )
      - name: 'Download all workflow run artifacts'
        uses: actions/download-artifact@v2
        with:
          path: 'artifacts'
      - name: 'Generate changelog'
        id: changelog
        uses: metcalfc/changelog-generator@v0.4.4
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Create Release'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.read-version.outputs.artefact-version }}
          name: Release ${{ steps.read-version.outputs.artefact-version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/pyecsim-${{ steps.read-version.outputs.artefact-version }}-*.whl